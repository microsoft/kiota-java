plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.1.3'
    id "org.sonarqube" version "4.3.1.3277"
}

java {
    modularity.inferModulePath = true
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.10"
}

spotbugsMain {
    excludeFilter = file("spotBugsExcludeFilter.xml")
    reports {
        html {
            required
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    excludeFilter = file("spotBugsExcludeFilter.xml")
    reports {
        html {
            required
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

jacocoTestReport {
    reports {
        xml.required
    }
}

sourceSets {
    main {
        java {
            exclude 'pom.xml'
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

apply from: "gradle/dependencies.gradle"

def pomConfig = {
    licenses {
        license([:]) {
            name "MIT License"
            url "http://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
}

sonarqube {
  properties {
    property "sonar.projectKey", "microsoft_kiota-java"
    property "sonar.organization", "microsoft"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

//Publishing tasks-
//Maven Central Snapshot: publishMavenPublicationToMavenRepository
//Maven Central Release: publishmavenPublicationToMaven2Repository

tasks.jar {
    manifest {
        attributes('Automatic-Module-Name': project.property('mavenGroupId'))
    }
}

publishing {

    publications {
		maven(MavenPublication) {
        	customizePom(pom)
        	groupId project.property('mavenGroupId')
        	artifactId project.property('mavenArtifactId')
        	version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenCentralSnapshotArtifactSuffix}"
        	from components.java
        	pom.withXml {
        		def pomFile = file("${project.buildDir}/generated-pom.xml")
        		writeTo(pomFile)
        	}
		}
    }
	repositories {
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
            name = 'sonatypeSnapshot'
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = properties.getProperty('sonatypeUsername')
        			password = properties.getProperty('sonatypePassword')
    			}
            }
        }
        
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            name = 'sonatype'
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = properties.getProperty('sonatypeUsername')
        			password = properties.getProperty('sonatypePassword')
    			}
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign)*.enabled = mavenCentralPublishingEnabled.toBoolean()

def fixAscNames = { name -> 
    if(name.contains('pom')) {
        "${project.property('mavenArtifactId')}-${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}.pom.asc"
    } else {
        name.replace('microsoft-kiota-java-serialization-json', "${project.property('mavenArtifactId')}-${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}")
    }
}

compileJava {
  options.compilerArgs << "-parameters"
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

def getVersionCode() {
    return mavenMajorVersion.toInteger() * 10000 + mavenMinorVersion.toInteger() * 100 + mavenPatchVersion.toInteger()
}

def getVersionName() {
    return "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"
}

artifacts {
	archives jar
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Microsoft Kiota-Serialization for Json'
            name 'Microsoft Kiota-Java Serialization-Json'
            url 'https://github.com/microsoft/kiota-java'
            organization {
                name 'Microsoft'
                url 'https://github.com/microsoft/kiota-java'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/microsoft/kiota-java/issues'
            }
            licenses {
                license {
                    name "MIT License"
            		url "http://opensource.org/licenses/MIT"
            		distribution "repo"
                }
            }
            scm {
                url 'https://github.com/microsoft/kiota-java'
            	connection 'scm:git:git://github.com/microsoft/kiota-java.git'
            	developerConnection 'scm:git:ssh://git@github.com:microsoft/kiota-java.git'
            }
            developers {
                developer {
                    name 'Microsoft'
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
	if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        tasks.withType(Sign)*.enabled = (properties.containsKey('enableSigning')) ? properties.getProperty('enableSigning').toBoolean() : false
        allprojects { ext."signing.keyId" = properties.getProperty('signing.keyId') }
        allprojects { ext."signing.secretKeyRingFile" = properties.getProperty('signing.secretKeyRingFile') }
		allprojects { ext."signing.password" = properties.getProperty('signing.password') }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("${project.buildDir}/generated-pom.xml")
    }
}