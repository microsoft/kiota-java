# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  tags:
    include:
      - "v*"
  branches:
    include:
      - main

parameters:
  - name: previewBranch
    type: string
    default: "refs/heads/main"

resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        os: windows
        image: windows-latest

    stages:
      - stage: build
        jobs:
          - job: build
            pool:
              name: Azure-Pipelines-1ESPT-ExDShared
              os: linux
              image: ubuntu-latest
            #TODO maybe missing template context with sdl baselines?
            steps:
              - checkout: self
                persistCredentials: true

              - task: JavaToolInstaller@1
                inputs:
                  versionSpec: '21'
                  jdkArchitectureOption: 'x64'
                  jdkSourceOption: 'PreInstalled'

              - task: DownloadSecureFile@1
                name: downloadLocalProperties
                inputs:
                  secureFile: 'local.properties'

              - task: DownloadSecureFile@1
                name: downloadSecringGpg
                inputs:
                  secureFile: 'secring.gpg'
              
              - pwsh: |
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/abstractions/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/authentication/azure/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/form/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/text/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/json/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/multipart/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/http/okHttp/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/bundle/secring.gpg -Verbose
                  Copy-Item $(downloadLocalProperties.secureFilePath) local.properties -Verbose
                displayName: Copy secring and 'local.properties'

              - script: ./gradlew --no-daemon publishToMavenLocal
                displayName: Publish to local Maven
                condition: not(contains(variables['build.sourceBranch'], 'refs/tags/v'))

              - script: ./gradlew --no-daemon publishToMavenLocal -PmavenCentralSnapshotArtifactSuffix=""
                displayName: Publish to local Maven
                condition: contains(variables['build.sourceBranch'], 'refs/tags/v')

              - pwsh: |
                  $contents = Get-Content gradle.properties -Raw
                  $major = $contents | Select-String -Pattern 'mavenMajorVersion = ([0-9]+)' | ForEach-Object { $_.Matches.Groups[1].Value }
                  $minor = $contents | Select-String -Pattern 'mavenMinorVersion = ([0-9]+)' | ForEach-Object { $_.Matches.Groups[1].Value }
                  $patch = $contents | Select-String -Pattern 'mavenPatchVersion = ([0-9]+)' | ForEach-Object { $_.Matches.Groups[1].Value }
                  $snapshot_suffix = if ($Env:BRANCH_NAME.StartsWith('refs/tags/v')) { '' } else { '-SNAPSHOT' }
                  $version = "$major.$minor.$patch$snapshot_suffix"
                  echo "Current version is $version"
                  echo "##vso[task.setvariable variable=PACKAGE_VERSION;isOutput=true]$version"
                displayName: Get current version
                name: GetVersion
                env:
                  BRANCH_NAME: $(Build.SourceBranchName)

              - pwsh: |
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-abstractions -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-authentication-azure -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-http-okHttp -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-form -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-json -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-text -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-multipart -Version $env:PACKAGE_VERSION
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-bundle -Version $env:PACKAGE_VERSION
                displayName: Inspect contents of local Maven cache
                env:
                  PACKAGE_VERSION: $[ dependencies.GetVersion.outputs['GetVersion.PACKAGE_VERSION'] ]

              - pwsh: |
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-abstractions -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-authentication-azure -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-http-okHttp -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-form -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-json -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-text -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-multipart -Version $env:PACKAGE_VERSION
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-bundle -Version $env:PACKAGE_VERSION
                displayName: Zip contents of local Maven cache
                env:
                  OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)
                  PACKAGE_VERSION: $[ dependencies.GetVersion.outputs['GetVersion.PACKAGE_VERSION'] ]
              
              - task: 1ES.PublishPipelineArtifact@1
                displayName: "Publish Artifact: jars"
                inputs:
                  artifactName: jars
                  targetPath: "$(Build.ArtifactStagingDirectory)/*.zip"

      # - stage: deploy
      #   dependsOn: build
      #   jobs:
      #     - deployment: deploy_github
      #       pool:
      #         name: Azure-Pipelines-1ESPT-ExDShared
      #         os: linux
      #         image: ubuntu-latest
      #       templateContext:
      #         type: releaseJob
      #         isProduction: true
      #         inputs:
      #           - input: pipelineArtifact
      #             artifactName: jars
      #             targetPath: "$(Pipeline.Workspace)"
      #       environment: kiota-github-releases
      #       strategy:
      #         runOnce:
      #           deploy:
      #             steps:
            