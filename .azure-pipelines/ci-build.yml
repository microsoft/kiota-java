# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  tags:
    include:
      - "v*"
  branches:
    include:
      - main

parameters:
  - name: previewBranch
    type: string
    default: "refs/heads/main"

resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        os: windows
        image: windows-latest

    stages:
      - stage: build
        jobs:
          - job: build
            pool:
              name: Azure-Pipelines-1ESPT-ExDShared
              os: linux
              image: ubuntu-latest
            #TODO maybe missing template context with sdl baselines?
            steps:
              - checkout: self
                persistCredentials: true

              - task: JavaToolInstaller@1
                inputs:
                  versionSpec: '21'
                  jdkArchitectureOption: 'x64'
                  jdkSourceOption: 'PreInstalled'

              - task: DownloadSecureFile@1
                name: downloadLocalProperties
                inputs:
                  secureFile: 'local.properties'

              - task: DownloadSecureFile@1
                name: downloadSecringGpg
                inputs:
                  secureFile: 'secring.gpg'
              
              - pwsh: |
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/abstractions/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/authentication/azure/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/form/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/text/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/json/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/serialization/multipart/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/http/okHttp/secring.gpg -Verbose
                  Copy-Item $(downloadSecringGpg.secureFilePath) components/bundle/secring.gpg -Verbose
                  Copy-Item $(downloadLocalProperties.secureFilePath) local.properties -Verbose
                displayName: Copy secring and 'local.properties'

              - script: ./gradlew --no-daemon publishToMavenLocal
                displayName: Publish to local Maven
                condition: not(contains(variables['build.sourceBranch'], 'refs/tags/v'))

              - script: ./gradlew --no-daemon publishToMavenLocal -PmavenCentralSnapshotArtifactSuffix=""
                displayName: Publish to local Maven
                condition: contains(variables['build.sourceBranch'], 'refs/tags/v')

              - pwsh: |
                  $contents = Get-Content gradle.properties -Raw
                  $major = $contents | Select-String -Pattern 'mavenMajorVersion = ([0-9]+)' | ForEach-Object { $_.Matches.Groups[1].Value }
                  $minor = $contents | Select-String -Pattern 'mavenMinorVersion = ([0-9]+)' | ForEach-Object { $_.Matches.Groups[1].Value }
                  $patch = $contents | Select-String -Pattern 'mavenPatchVersion = ([0-9]+)' | ForEach-Object { $_.Matches.Groups[1].Value }
                  $snapshot_suffix = if ($Env:BRANCH_NAME.StartsWith('refs/tags/v')) { '' } else { '-SNAPSHOT' }
                  $version = "$major.$minor.$patch$snapshot_suffix"
                  echo "Current version is $version"
                  echo "##vso[task.setvariable variable=PACKAGE_VERSION;]$version"
                displayName: Get current version
                name: GetVersion
                env:
                  BRANCH_NAME: $(Build.SourceBranchName)

              - pwsh: |
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-abstractions -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-authentication-azure -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-http-okHttp -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-form -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-json -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-text -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-serialization-multipart -Version $(PACKAGE_VERSION)
                  .\scripts\ValidatePackageContents.ps1 -ArtifactId microsoft-kiota-bundle -Version $(PACKAGE_VERSION)
                displayName: Inspect contents of local Maven cache

              - pwsh: |
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-abstractions -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-authentication-azure -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-http-okHttp -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-form -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-json -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-text -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-serialization-multipart -Version $(PACKAGE_VERSION)
                  .\scripts\zipPackageContent.ps1 -OutputDirectory $Env:OUTPUT_DIRECTORY -ArtifactId microsoft-kiota-bundle -Version $(PACKAGE_VERSION)
                  echo "list of zips:"
                  Get-ChildItem -Path $Env:OUTPUT_DIRECTORY -Filter "*.zip" | ForEach-Object { Write-Host $_.FullName }
                displayName: Zip contents of local Maven cache
                env:
                  OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)
              
              - task: 1ES.PublishPipelineArtifact@1
                displayName: "Publish Artifact: jars"
                inputs:
                  artifactName: jars
                  targetPath: "$(Build.ArtifactStagingDirectory)"

      - stage: deploy
        # condition: and(or(contains(variables['build.sourceBranch'], 'refs/tags/v'), eq(variables['build.sourceBranch'], '${{ parameters.previewBranch }}')), succeeded())
        dependsOn: build
        jobs:
          - deployment: deploy_github
            # condition: and(contains(variables['build.sourceBranch'], 'refs/tags/v'), succeeded())
            pool:
              name: Azure-Pipelines-1ESPT-ExDShared
              os: linux
              image: ubuntu-latest
            templateContext:
              type: releaseJob
              isProduction: true
              inputs:
                - input: pipelineArtifact
                  artifactName: jars
                  targetPath: "$(Pipeline.Workspace)"
            environment: kiota-github-releases
            strategy:
              runOnce:
                deploy:
                  steps:
                    - pwsh: |
                        $zips = Get-ChildItem -Path "$(Pipeline.Workspace)" -Filter "*.zip"
                        $zip = $zips | Select-Object -First 1
                        $zipName = $zip.Name
                        if ($zipName -match "\d+.\d+.\d+")
                        {
                          $version = $matches[0]
                          echo "Current version is $version"
                          echo "##vso[task.setvariable variable=artifactVersion;]$version"
                        }
                        else
                        {
                          Write-Error "No valid version found in zip file name."
                          exit 1
                        }

                    - pwsh: |
                        $zips = Get-ChildItem -Path "$(Pipeline.Workspace)" -Filter "*.zip"
                        foreach ($zip in $zips) {
                            $targetPath = $zip.FullName.Replace(".zip", "")
                            Expand-Archive -Path $zip.FullName -DestinationPath $targetPath
                            Remove-Item -Path $zip.FullName -Force
                        }
                      displayName: Unzip artifacts
                        
                    - task: GitHubRelease@1
                      inputs:
                        gitHubConnection: "microsoftkiota"
                        tagSource: userSpecifiedTag
                        tag: "v$(artifactVersion)"
                        title: "v$(artifactVersion)"
                        assets: |
                          $(Pipeline.Workspace)/**/*.jar
                          $(Pipeline.Workspace)/**/*.jar.sha256
                          $(Pipeline.Workspace)/**/*.jar.asc
                          $(Pipeline.Workspace)/**/*.jar.asc.sha256
                          $(Pipeline.Workspace)/**/*.pom
                          $(Pipeline.Workspace)/**/*.pom.sha256
                          $(Pipeline.Workspace)/**/*.pom.asc
                          $(Pipeline.Workspace)/**/*.pom.asc.sha256

                        addChangeLog: false
                        action: edit
            
          - deployment: deploy_maven
            # snapshots are not supported by ESRP release for now, but they are planning to add support. When it happens, simply remove the condition
            condition: and(contains(variables['build.sourceBranch'], 'refs/tags/v'), succeeded())
            pool:
              name: Azure-Pipelines-1ESPT-ExDShared
              os: linux
              image: ubuntu-latest
            templateContext:
              type: releaseJob
              isProduction: true
              inputs:
                - input: pipelineArtifact
                  artifactName: jars
                  targetPath: "$(Pipeline.Workspace)"
            dependsOn: []
            environment: maven_central
            strategy:
              runOnce:
                deploy:
                  steps:
                    - pwsh: |
                        $zips = Get-ChildItem -Path "$(Pipeline.Workspace)" -Filter "*.zip"
                        $targetPath = "$(Pipeline.Workspace)\archiving"
                        foreach ($zip in $zips) {
                            Expand-Archive -Path $zip.FullName -DestinationPath $targetPath
                            Remove-Item -Path $zip.FullName -Force
                        }
                        Compress-Archive -Path "$(Pipeline.Workspace)\archiving\*" -DestinationPath "$(Pipeline.Workspace)\publishing\packages.zip"
                      displayName: Rezip artifacts in a single zip file
                    - task: EsrpRelease@9
                      inputs:
                        connectedservicename: "Federated DevX ESRP Managed Identity Connection"
                        keyvaultname: "akv-prod-eastus"
                        authcertname: "ReferenceLibraryPrivateCert"
                        signcertname: "ReferencePackagePublisherCertificate"
                        clientid: "65035b7f-7357-4f29-bf25-c5ee5c3949f8"
                        intent: "PackageDistribution"
                        contenttype: "Maven"
                        contentsource: "Folder"
                        folderlocation: "$(Pipeline.Workspace)\\publishing"
                        waitforreleasecompletion: true
                        owners: vibiret@microsoft.com,mmainer@microsoft.com
                        approvers: vibiret@microsoft.com,mmainer@microsoft.com
                        serviceendpointurl: "https://api.esrp.microsoft.com"
                        mainpublisher: "ESRPRELPACMAN"
                        domaintenantid: "cdc5aeea-15c5-4db6-b079-fcadd2505dc2"